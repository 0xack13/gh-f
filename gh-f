#!/usr/bin/env bash
set -e

VERSION="gh-f 0.3.6"

ID_COLOUR="\033[36m"
TEXT_COLOUR="\033[34m"
STATUS_COLOUR="\033[33m"
SHELL_COLOUR="\033[0m"
[[ -z $(command -v bat) ]] && HELP_PAGER="less" || HELP_PAGER="bat -l man -p"
[[ -z $(command -v bat) ]] && LOG_PAGER="less" || LOG_PAGER="bat -l log -p"

help() {
	help_message="
gh f [cmd]

COMMANDS
  -a|adds: add to staging area
  -r|runs: show github workflow runs and filter logs
  -g|greps: grep in files in revision history
  -p|prs: view, diff and checkout open PR
  -b|branches: checkout and diff branches
  -l|logs: select commits and show diff
  -t|tags: checkout and diff version tags
  -s|search: search issues in any repository
  -m|myissue: search issues you opened somewhere
  -k|pick: cherrypick files from one branch to the other
  -e|envs: show git config list
  -h|help: show this help message
  -V|version: show the current version

USAGE
  gh f -a | gh f adds

	multi-file selection with tab
	enter: add selected files to staging area
	ctrl-d: diff selected files

  gh f -r | gh f runs

	enter: search the selected run logs
	exits if no runs exist

  gh f -g | gh f greps

    prompt for pattern or pass regex as positional argument
    select files whose revisions contain pattern
    show pattern in revision history
	enter: show file at point in time of revision

  gh f -p | gh f prs

    manage open PRs

	enter: checkout the PR
	ctrl-d: diff the PR
	ctrl-v: view the PR

  gh f -b | gh f branches

	enter: checkout the branch (track if remote)
	ctrl-d: diff the branch
	ctrl-x: delete the branch (prompt for confirmation)

  gh f -l | gh f logs

	file paths can be passed as positional arguments
  	enter: show selected commit diff

  gh f -t | gh f tags

  	enter: checkout the tag in detached HEAD state
	ctrl-d: diff the tag against current branch

  gh f -s | gh f search

  	prompt for repository name and issue title
	enter: view selected issue

  gh f -m | gh f myissue

  	prompt for repository name
	enter: view selected issue

  gh f -k | gh f pick

  	prompt for branch and file to cherrypick
	only show files that are present on both branches
	multi-file selection with tab
	enter: confirm branch and pick files

  gh f -e | gh f envs

  	show git config --list of environment variables
	for the current git project

CUSTOMISATION

  The prompt colours are defined via their ANSI sequences: if you like different ones you
  may change them yourself in the source code.

  The pager that is used for git diff and logs is defined in your own gitconfig, therefore
  independent of this extension. For runs and help page we default to bat or to less -R if
  the former is not detected in your system.

"
	echo "$help_message" | $HELP_PAGER
}

is_remote() {
	[ ! "$(git ls-remote --heads origin 2>/dev/null | wc -l | tr -s ' ')" -eq 0 ]
}

is_git_repo() {
	[ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]
}

adds() {
	if ! is_git_repo; then {
		echo "not a git repo"
		exit
	}; fi
	unstaged_list="$(git ls-files . --exclude-standard --others -m)"

	if [[ -n "$unstaged_list" ]]; then
		lines="$(
			echo "$unstaged_list" |
				fzf -d' ' \
					--exit-0 \
					--ansi --delimiter=: \
					--multi \
					--prompt="add files:" \
					--preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS git diff --stat --color=always {1}' \
					--expect="enter,ctrl-d"
		)"

		key="$(head -1 <<<"$lines")"
		files="$(sed 1d <<<"$lines" | cut -d: -f2 | tr -d ' ')"

		case "$key" in
		enter) echo "$files" | xargs -n1 -t git add ;;
		ctrl-d) echo "$files" | xargs -n1 git diff ;;
		esac

	else
		echo "no files to stage"
		exit
	fi
}

runs() {
	if ! is_remote; then {
		echo "no gh remote found"
		exit
	}; fi
	gh run list -L100 | awk -F'\t' -v ID_COLOUR="$ID_COLOUR" -v TEXT_COLOUR="$TEXT_COLOUR" -v STATUS_COLOUR="$STATUS_COLOUR" -v SHELL_COLOUR="$SHELL_COLOUR" \
		'{print ID_COLOUR $7 SHELL_COLOUR": " TEXT_COLOUR $4 SHELL_COLOUR" - " STATUS_COLOUR $2 SHELL_COLOUR" - "$9}' |
		fzf -d' ' \
			--exit-0 \
			--ansi --delimiter=: \
			--prompt="runs logs:" \
			--preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh run view {1}' \
			--bind "enter:execute:(gh run view --log {1} | $LOG_PAGER)"
}

greps() {
	if ! is_git_repo; then {
		echo "not a git repo"
		exit
	}; fi
	if [[ $# -eq 0 ]]; then
		read -rp "search regex: " regex
	else
		regex="$*"
	fi
	[[ -z "$regex" ]] && exit

	revision_files="$(git rev-list --all | xargs git grep "$regex" | awk -F':' '{print $2}' | sort -u)"
	[[ -z "$revision_files" ]] && {
		echo "no files containing $regex"
		return
	}
	selected_file="$(
		echo "$revision_files" |
			fzf -d' ' \
				--ansi \
				--prompt="files containing '$regex' in revisions:" \
				--preview="git log --oneline --format='%C(bold blue)%h%C(reset) - %C(green)%ar%C(reset) - %C(cyan)%an%C(reset)%C(bold yellow)%d%C(reset): %s' --color=always {}"
	)"

	revision="$(
		git rev-list --all --date-order -- $selected_file | xargs -I {} git grep "$regex" {} -- $selected_file |
			awk -F':' -v ID_COLOUR="$ID_COLOUR" '{print ID_COLOUR $1}' | uniq |
			fzf -d' ' \
				--exit-0 \
				--ansi \
				--prompt="commits containing $regex in $selected_file:" \
				--preview="git show {}:$selected_file | grep -n -C1 --color=always \"$regex\""
	)"
	git show "$revision":$selected_file
	printf '\ncommit: %s\nfile: %s\n' "$revision" "$selected_file"
}

prs() {
	if ! is_remote; then {
		echo "no gh remote found"
		exit
	}; fi
	open_prs="$(gh pr list -s"open")"

	if [[ -n "$open_prs" ]]; then

		lines="$(gh pr list -s"open" | awk -F'\t' -v ID_COLOUR="$ID_COLOUR" -v TEXT_COLOUR="$TEXT_COLOUR" -v SHELL_COLOUR="$SHELL_COLOUR" \
			'{print ID_COLOUR $1 SHELL_COLOUR": " TEXT_COLOUR $3}' |
			fzf -d' ' \
				--exit-0 \
				--ansi --delimiter=: \
				--prompt="open PRs:" \
				--preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh pr view {1}' \
				--expect="enter,ctrl-d,ctrl-v")"

		key="$(head -1 <<<"$lines")"
		id="$(sed 1d <<<"$lines" | cut -d: -f1)"

		case "$key" in
		enter) gh pr checkout "$id" ;;
		ctrl-v) gh pr view "$id" ;;
		ctrl-d) gh pr diff "$id" ;;
		esac

	else
		echo "no open PRs"
		exit
	fi
}

branches() {
	if ! is_git_repo; then {
		echo "not a git repo"
		exit
	}; fi
	lines="$(git branch -a --sort=-committerdate | sed 's/[* ]//g' | grep -v 'HEAD' |
		fzf -d' ' \
			--prompt="branches:" \
			--preview="git log --oneline --format='%C(bold blue)%h%C(reset) - %C(green)%ar%C(reset) - %C(cyan)%an%C(reset)%C(bold yellow)%d%C(reset): %s' --color=always {}" \
			--expect "enter,ctrl-d,ctrl-x")"

	key="$(head -1 <<<"$lines")"
	branch="$(sed '1d;s/remotes\///g' <<<"$lines")"

	case "$key" in
	enter) if [[ $branch == *"origin"* ]]; then git checkout --track "$branch"; else git checkout "$branch"; fi ;;
	ctrl-d) echo "$branch <-> $(git branch --show-current)" && git diff "$branch" ;;
	ctrl-x)
		read -rp "Delete branch \"$branch\"? [y|n] "
		if [[ $REPLY =~ ^[Yy]$ ]]; then git branch -D "$branch"; fi
		;;
	esac

}

logs() {
	if ! is_git_repo; then {
		echo "not a git repo"
		exit
	}; fi
	commit="$(git log --oneline --color=always "$@" |
		fzf -d' ' \
			--ansi \
			--prompt="$(git branch --show-current):" \
			--preview="git show --stat --abbrev-commit {1} --format='%C(bold blue)%h%C(reset) - %C(green)%ar%C(reset): %C(cyan)%an%C(reset)%C(bold yellow)%d%C(reset)' --color=always")"

	[[ -n ${commit} ]] && cut -f1 -d' ' <<<"$commit" | xargs -n1 git show
}

tags() {
	if ! is_git_repo; then {
		echo "not a git repo"
		exit
	}; fi
	lines="$(
		git tag -l -n --sort=-version:refname | awk -F' {2,}' -v ID_COLOUR="$ID_COLOUR" -v TEXT_COLOUR="$TEXT_COLOUR" -v SHELL_COLOUR="$SHELL_COLOUR" '{print ID_COLOUR $1 SHELL_COLOUR" - " TEXT_COLOUR $2}' |
			fzf -d' ' \
				--exit-0 \
				--ansi --delimiter=- \
				--prompt="tags:" \
				--preview="GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS git diff --stat --color=always {1} 2>/dev/null" \
				--expect="enter,ctrl-d"
	)"

	key="$(head -1 <<<"$lines")"
	tag="$(sed 1d <<<"$lines" | cut -d '-' -f1 | tr -d ' ')"

	case "$key" in
	enter) git checkout tags/"$tag" ;;
	ctrl-d) git diff "$tag" ;;
	esac
}

search() {
	read -rp "repository name: " repo
	[[ -z $repo ]] && exit
	read -rp "search: " search
	[[ -z $search ]] && exit
	issue_list="$(gh issue list -s"all" -R "$repo" -L 300 -S"$search")"

	if [[ -n $issue_list ]]; then
		issue="$(echo "$issue_list" | awk -F'\t' -v ID_COLOUR="$ID_COLOUR" -v TEXT_COLOUR="$TEXT_COLOUR" -v STATUS_COLOUR="$STATUS_COLOUR" -v SHELL_COLOUR="$SHELL_COLOUR" \
			'{print ID_COLOUR $1 SHELL_COLOUR": " TEXT_COLOUR $3 SHELL_COLOUR" - " STATUS_COLOUR $2}' |
			fzf -d' ' \
				--ansi \
				--prompt="$search in $repo:")"
	else
		echo "$search not found in $repo"
		exit
	fi

	[[ -n $issue ]] && cut -f1 -d: <<<"$issue" | xargs -n1 gh issue view -R "$repo" -c
}

myissue() {
	read -rp "repository name: " repo
	[[ -z $repo ]] && exit
	issue_list="$(gh issue list -s"all" -R "$repo" -A @me)"

	if [[ -n $issue_list ]]; then
		issue="$(echo "$issue_list" | awk -F'\t' -v ID_COLOUR="$ID_COLOUR" -v TEXT_COLOUR="$TEXT_COLOUR" -v STATUS_COLOUR="$STATUS_COLOUR" -v SHELL_COLOUR="$SHELL_COLOUR" \
			'{print ID_COLOUR $1 SHELL_COLOUR": " TEXT_COLOUR $3 SHELL_COLOUR" - " STATUS_COLOUR $2}' |
			fzf -d' ' \
				--ansi \
				--prompt="my issues in $repo:")"
	else
		echo "no issue found in $repo"
		exit
	fi

	[[ -n $issue ]] && cut -f1 -d: <<<"$issue" | xargs -n1 gh issue view -R "$repo" -c
}

pick() {
	if ! is_git_repo; then {
		echo "not a git repo"
		exit
	}; fi
	from_branch=$(git branch | fzf -d' ' --prompt="pick from branch:" | tr -d ' ')
	[[ -n "$from_branch" ]] && files="$(git diff --name-only --diff-filter=M "$from_branch" |
		fzf -d' ' \
			--multi \
			--select-1 \
			--exit-0 \
			--preview="GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS git diff --stat --color=always $from_branch {1} 2>/dev/null" \
			--prompt="diff files:")" || echo "no branch selected"

	[[ -n ${files} ]] && git restore --source "${from_branch}" ${files}
}

envs() {
	config_var=$(git config --list | cut -d= -f1 | fzf -d' ' --prompt 'config list:' --preview='git config {}')
	[[ -n "$config_var" ]] && git config "$config_var"
}

# print help page
[[ "$#" -eq 0 ]] && help

while [[ "$#" -gt 0 ]]; do
	case $1 in
	-h | --help | help)
		help
		shift
		;;
	-a | adds)
		adds
		shift
		;;
	-r | runs)
		runs
		shift
		;;
	-g | greps)
		shift
		greps "$@"
		shift
		;;
	-p | prs)
		prs
		shift
		;;
	-b | branches)
		branches
		shift
		;;
	-l | logs)
		shift
		logs "$@"
		shift
		;;
	-t | tags)
		tags
		shift
		;;
	-s | search)
		search
		shift
		;;
	-m | myissue)
		myissue
		shift
		;;
	-k | pick)
		pick
		shift
		;;
	-e | envs)
		envs
		shift
		;;
	-V | version)
		echo "$VERSION"
		shift
		;;
	*) help ;;
	esac
	shift
done
