#!/usr/bin/env bash
set -e

help() {
	help_message="
gh f [cmd]

COMMANDS
  run: show fzf preview of workflow runs + binding
  help: show this help message
  version: show the current version
"
	echo "$help_message" | bat -l man -p
}

is_remote() {
	[[ ! $(git ls-remote --heads origin 2>/dev/null | wc -l | tr -s ' ') -eq 0 ]]
}

runs() {
	if ! is_remote; then { echo "no gh remote"; exit; }; fi
	gh run list | awk -F'\t' '{print "\033[36m" $7 "\033[0m"": " "\033[35m" $2 "\033[0m"" - " $9}' | \
		fzf --ansi --delimiter=: \
			--preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh run view {1}' \
			--bind "enter:execute:(gh run view --log {1} | bat -l log -p)" \
			--bind "ctrl-t:execute:(gh run view --log {1} | rg instance | cut -f3 | cut -d' ' -f2 | jq -r '.message' -C | less -R)"
}

prs() {
	lines="$(gh pr list -s"open" | awk -F'\t' '{print "\033[36m" $1 "\033[0m"": " "\033[35m" $3}' | \
		fzf --ansi --delimiter=: \
			--preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh pr view {1}' \
			--expect='enter,ctrl-d,ctrl-v')"

	key="$(head -1 <<< "$lines")"
	id="$(sed 1d <<< "$lines" | cut -d: -f1)"

	case "$key" in
		enter) gh pr checkout "$id" ;;
		ctrl-v) gh pr view "$id" ;;
		ctrl-d) gh pr diff "$id" ;;
	esac
}

branches() {
	lines="$(git branch -a | sed 's/[* ]//g' | \
		fzf \
			--preview="git log --oneline --format='%C(bold blue)%h%C(reset) - %C(green)%ar%C(reset) - %C(cyan)%an%C(reset)%C(bold yellow)%d%C(reset): %s' --color=always {}" \
			--expect "enter,ctrl-d")"

	key="$(head -1 <<< "$lines")"
	branch="$(sed '1d;s/remotes\///g' <<< "$lines")"

	case "$key" in
		enter) [[ $branch == *"origin"* ]] && git checkout --track "$branch" || git checkout "$branch" ;;
		ctrl-d) git diff "$id" ;;
	esac

}

# print help page
[[ "$#" -eq 0 ]] && help

while [[ "$#" -gt 0 ]]; do
    case $1 in
        -h|--help|help) help; shift ;;
		-r|runs) runs; shift ;;
		-p|prs) prs; shift ;;
		-b|branches) branches; shift ;;
        *) echo "Unknown parameter passed: $1" ;;
    esac
    shift
done

