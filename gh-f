#!/usr/bin/env bash
set -e

VERSION="0.1.1"

ID_COLOUR="\033[36m"
TEXT_COLOUR="\033[34m"
STATUS_COLOUR="\033[33m"
SHELL_COLOUR="\033[0m"
[[ -z $(command -v bat) ]] && HELP_PAGER="less" || HELP_PAGER="bat -l man -p"
[[ -z $(command -v bat) ]] && LOG_PAGER="less" || LOG_PAGER="bat -l log -p"

help() {
	help_message="
gh f [cmd]

COMMANDS
  -r|run: show github workflow runs and filter logs
  -p|prs: view, diff and checkout PR
  -b|branches: checkout and diff branches
  -l|logs: select commits and show diff
  -s|search: search issues in any repository
  -m|myissue: search issues you opened somewhere
  -k|pick: cherrypick files from one branch to the other
  -h|help: show this help message
  -V|version: show the current version

USAGE
  gh f -r | gh f runs

	enter: search the selected run logs
	exits if no runs exist

  gh f -p | gh f prs

	enter: checkout the PR
	ctrl-d: diff the PR
	ctrl-v: view the PR

  gh f -b | gh f branches

	enter: checkout the branch (track if remote)
	ctrl-d: diff the branch

  gh f -l | gh f logs

  	enter: show selected commit diff

  gh f -s | gh f search

  	prompt for repository name and issue title
	enter: view selected issue

  gh f -m | gh f myissue

  	prompt for repository name
	enter: view selected issue

  gh f -k | gh f pick

  	prompt for branch and file to cherrypick
	multi-file selection with tab
	enter: confirm branch and pick files

CUSTOMISATION

  The prompt colours are defined via their ANSI sequences: if you like different ones you
  may change them yourself in the source code.

  The pager that is used for git diff and logs is defined in your own gitconfig, therefore
  independent of this extension. For runs and help page we default to bat or to less -R if
  the former is not detected in your system.

"
	echo "$help_message" | $HELP_PAGER
}

is_remote() {
	[ ! "$(git ls-remote --heads origin 2>/dev/null | wc -l | tr -s ' ')" -eq 0 ]
}

is_git_repo() {
	[ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]
}

runs() {
	if ! is_remote; then {
		echo "no gh remote found"
		exit
	}; fi
	gh run list -L100 | awk -F'\t' -v ID_COLOUR="$ID_COLOUR" -v TEXT_COLOUR="$TEXT_COLOUR" -v STATUS_COLOUR="$STATUS_COLOUR" -v SHELL_COLOUR="$SHELL_COLOUR" \
		'{print ID_COLOUR $7 "\033[0m"": " TEXT_COLOUR $4 SHELL_COLOUR" - " STATUS_COLOUR $2 SHELL_COLOUR" - "$9}' |
		fzf \
			--exit-0 \
			--ansi --delimiter=: \
			--prompt="runs logs: " \
			--preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh run view {1}' \
			--bind "enter:execute:(gh run view --log {1} | $LOG_PAGER)"
}

prs() {
	if ! is_remote; then {
		echo "no gh remote found"
		exit
	}; fi
	lines="$(gh pr list -s"open" | awk -F'\t' -v ID_COLOUR="$ID_COLOUR" -v TEXT_COLOUR="$TEXT_COLOUR" -v SHELL_COLOUR="$SHELL_COLOUR" \
		'{print ID_COLOUR $1 SHELL_COLOUR": " TEXT_COLOUR $3}' |
		fzf \
			--ansi --delimiter=: \
			--prompt="open PRs: " \
			--preview="GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh pr view {1}" \
			--expect="enter,ctrl-d,ctrl-v")"

	key="$(head -1 <<<"$lines")"
	id="$(sed 1d <<<"$lines" | cut -d: -f1)"

	case "$key" in
	enter) gh pr checkout "$id" ;;
	ctrl-v) gh pr view "$id" ;;
	ctrl-d) gh pr diff "$id" ;;
	esac
}

branches() {
	if ! is_git_repo; then {
		echo "not a git repo"
		exit
	}; fi
	lines="$(git branch -a | sed 's/[* ]//g' |
		fzf \
			--prompt="branches: " \
			--preview="git log --oneline --format='%C(bold blue)%h%C(reset) - %C(green)%ar%C(reset) - %C(cyan)%an%C(reset)%C(bold yellow)%d%C(reset): %s' --color=always {}" \
			--expect "enter,ctrl-d")"

	key="$(head -1 <<<"$lines")"
	branch="$(sed '1d;s/remotes\///g' <<<"$lines")"

	case "$key" in
	enter) if [[ $branch == *"origin"* ]]; then git checkout --track "$branch"; else git checkout "$branch"; fi ;;
	ctrl-d) git diff "$branch" ;;
	esac

}

logs() {
	if ! is_git_repo; then {
		echo "not a git repo"
		exit
	}; fi
	commit="$(git log --oneline --color=always |
		fzf \
			--ansi \
			--prompt="$(git branch --show-current): " \
			--preview="git show --stat --abbrev-commit {1} --format='%C(bold blue)%h%C(reset) - %C(green)%ar%C(reset): %C(cyan)%an%C(reset)%C(bold yellow)%d%C(reset)' --color=always")"

	[[ -n ${commit} ]] && cut -f1 -d' ' <<<"$commit" | xargs -n1 git show
}

search() {
	read -rp "repository name: " repo
	[[ -z $repo ]] && exit
	read -rp "search: " search
	[[ -z $search ]] && exit
	issue_list="$(gh issue list -s"all" -R "$repo" -L 300 -S"$search")"

	if [[ -n $issue_list ]]; then
		issue="$(echo "$issue_list" | awk -F'\t' -v ID_COLOUR="$ID_COLOUR" -v TEXT_COLOUR="$TEXT_COLOUR" -v STATUS_COLOUR="$STATUS_COLOUR" -v SHELL_COLOUR="$SHELL_COLOUR" \
			'{print ID_COLOUR $1 SHELL_COLOUR": " TEXT_COLOUR $3 SHELL_COLOUR" - " STATUS_COLOUR $2}' |
			fzf \
				--ansi \
				--prompt="$search in $repo: ")"
	else
		echo "$search not found in $repo"
		exit
	fi

	[[ -n $issue ]] && cut -f1 -d: <<<"$issue" | xargs -n1 gh issue view -R "$repo" -c
}

myissue() {
	read -rp "repository name: " repo
	[[ -z $repo ]] && exit
	issue_list="$(gh issue list -s"all" -R "$repo" -A @me)"

	if [[ -n $issue_list ]]; then
		issue="$(echo "$issue_list" | awk -F'\t' -v ID_COLOUR="$ID_COLOUR" -v TEXT_COLOUR="$TEXT_COLOUR" -v STATUS_COLOUR="$STATUS_COLOUR" -v SHELL_COLOUR="$SHELL_COLOUR" \
			'{print ID_COLOUR $1 SHELL_COLOUR": " TEXT_COLOUR $3 SHELL_COLOUR" - " STATUS_COLOUR $2}' |
			fzf \
				--ansi \
				--prompt="my issues in $repo: ")"
	else
		echo "no issue found in $repo"
		exit
	fi

	[[ -n $issue ]] && cut -f1 -d: <<<"$issue" | xargs -n1 gh issue view -R "$repo" -c
}

pick() {
	if ! is_git_repo; then {
		echo "not a git repo"
		exit
	}; fi
	from_branch=$(git branch | fzf --prompt="pick from branch: " | tr -d ' ')
	[[ -n "$from_branch" ]] && files="$(git diff --name-only "$from_branch" |
		fzf \
			--multi \
			--select-1 \
			--exit-0 \
			--preview="GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS git diff --stat --color=always $from_branch {1} 2>/dev/null" \
			--prompt="diff files: ")" || echo "no branch selected"

	[[ -n ${files} ]] && git restore --source "${from_branch}" "${files}"
}

# print help page
[[ "$#" -eq 0 ]] && help

while [[ "$#" -gt 0 ]]; do
	case $1 in
	-h | --help | help)
		help
		shift
		;;
	-r | runs)
		runs
		shift
		;;
	-p | prs)
		prs
		shift
		;;
	-b | branches)
		branches
		shift
		;;
	-l | logs)
		logs
		shift
		;;
	-s | search)
		search
		shift
		;;
	-m | myissue)
		myissue
		shift
		;;
	-k | pick)
		pick
		shift
		;;
	-V | version)
		echo "$VERSION"
		shift
		;;
	*) help ;;
	esac
	shift
done
