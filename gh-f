#!/usr/bin/env bash
set -e

VERSION="0.1.0"
[[ -z $(command -v bat) ]] && HELP_PAGER="less" || HELP_PAGER="bat -l man -p"
[[ -z $(command -v bat) ]] && LOG_PAGER="less" || LOG_PAGER="bat -l log -p"

help() {
	help_message="
gh f [cmd]

COMMANDS
  -r|run: show github workflow runs and filter logs
  -p|prs: view, diff and checkout PR
  -b|branches: checkout and diff branches
  -l|logs: select commits and show diff
  -s|search: search issues in any repository
  -h|help: show this help message
  -V|version: show the current version

USAGE
  gh f -r | gh f runs

	enter: search the logs

  gh f -p | gh f prs

	enter: checkout the PR
	ctrl-d: diff the PR
	ctrl-v: view the PR

  gh f -b | gh f branches

	enter: checkout the branch (track if remote)
	ctrl-d: diff the branch

  gh f -l | gh f logs

  	enter: show selected commit diff

  gh f -s | gh f search

  	prompt for repository name and issue title
	enter: view selected issue

"
	echo "$help_message" | $HELP_PAGER
}

is_remote() {
	[[ ! $(git ls-remote --heads origin 2>/dev/null | wc -l | tr -s ' ') -eq 0 ]]
}

runs() {
	if ! is_remote; then { echo "no gh remote"; exit; }; fi
	gh run list -L100 | awk -F'\t' '{print "\033[36m" $7 "\033[0m"": " "\033[35m" $4 "\033[0m"" - " "\033[33m" $2 "\033[0m"" - "$9}' | \
		fzf \
			--ansi --delimiter=: \
			--prompt="runs logs: " \
			--preview='GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh run view {1}' \
			--bind "enter:execute:(gh run view --log {1} | $LOG_PAGER)"
}

prs() {
	lines="$(gh pr list -s"open" | awk -F'\t' '{print "\033[36m" $1 "\033[0m"": " "\033[35m" $3}' | \
		fzf \
			--ansi --delimiter=: \
			--prompt="open PRs: " \
			--preview="GH_FORCE_TTY=$FZF_PREVIEW_COLUMNS gh pr view {1}" \
			--expect="enter,ctrl-d,ctrl-v")"

	key="$(head -1 <<< "$lines")"
	id="$(sed 1d <<< "$lines" | cut -d: -f1)"

	case "$key" in
		enter) gh pr checkout "$id" ;;
		ctrl-v) gh pr view "$id" ;;
		ctrl-d) gh pr diff "$id" ;;
	esac
}

branches() {
	lines="$(git branch -a | sed 's/[* ]//g' | \
		fzf \
			--prompt="branches: " \
			--preview="git log --oneline --format='%C(bold blue)%h%C(reset) - %C(green)%ar%C(reset) - %C(cyan)%an%C(reset)%C(bold yellow)%d%C(reset): %s' --color=always {}" \
			--expect "enter,ctrl-d")"

	key="$(head -1 <<< "$lines")"
	branch="$(sed '1d;s/remotes\///g' <<< "$lines")"

	case "$key" in
		enter) [[ $branch == *"origin"* ]] && git checkout --track "$branch" || git checkout "$branch" ;;
		ctrl-d) git diff "$id" ;;
	esac

}

logs() {
	commit="$(git log --oneline --color=always | \
		fzf \
			--ansi \
			--prompt="$(git branch --show-current): " \
			--preview="git show --stat --abbrev-commit {1} --format='%C(bold blue)%h%C(reset) - %C(green)%ar%C(reset): %C(cyan)%an%C(reset)%C(bold yellow)%d%C(reset)' --color=always")"

	[[ -n ${commit} ]] && cut -f1 -d' ' <<< $commit | xargs -n1 git show
}

search() {
	read -p "repository name: " repo; [[ -z $repo ]] && exit;
	read -p "search: " search; [[ -z $search ]] && exit;
	issue_list="$(gh issue list -s"all" -R $repo -L 300 -S"$search")"

	if [[ -n $issue_list ]]
	then
		issue="$(echo "$issue_list" | awk -F'\t' '{print "\033[36m" $1 "\033[0m"": " "\033[35m" $3 "\033[0m"" - " "\033[33m" $2}' | \
			fzf \
				--ansi \
				--prompt="$search in $repo: ")"
	else
		echo "$search not found in $repo"
		exit
	fi

	[[ -n $issue ]] && cut -f1 -d: <<< "$issue" | xargs -n1 gh issue view -R $repo -c
}

myissue() {
	read -p "repository name: " repo; [[ -z $repo ]] && exit;
	issue_list="$(gh issue list -s"all" -R "$repo" -A @me)"
	
	if [[ -n $issue_list ]]
	then
		issue="$(echo "$issue_list" | awk -F'\t' '{print "\033[36m" $1 "\033[0m"": " "\033[35m" $3 "\033[0m"" - " "\033[33m" $2}' | \
			fzf \
				--ansi \
				--prompt="my issues in $repo: ")"
	else
		echo "no issue found in $repo"
		exit
	fi

	[[ -n $issue ]] && cut -f1 -d: <<< "$issue" | xargs -n1 gh issue view -R $repo -c
}


# print help page
[[ "$#" -eq 0 ]] && help

while [[ "$#" -gt 0 ]]; do
    case $1 in
        -h|--help|help) help; shift ;;
		-r|runs) runs; shift ;;
		-p|prs) prs; shift ;;
		-b|branches) branches; shift ;;
		-l|logs) logs; shift ;;
		-s|search) search; shift ;;
		-m|myissue) myissue; shift ;;
		-V|version) echo "$VERSION"; shift ;;
        *) help;
    esac
    shift
done

